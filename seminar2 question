1.Read up on the Boston Matrix
Boston Matrix is a marketing tool used for product portfolio analysis and management. It describes the impact of market share and market 
growth by four catogories:qusetion marks, stars, cash cows, dogs[Oxford learning lab]. As assumpotion, the product will experience four 
catogries as the sequence of question marks, stars, cash cows, dogs, so that the company can make money.
Fistly, qusetion marks phase presents the product may be highly profitable, but the market share is very small and risk is high. If the 
product is not good enough or the marketing is not done well, the product may directly go to dogs, which means this product failed. If we
have done something but the product still keep a low market share and growth(goes to cash cows and quickly goes to dogs), we should release
resource from this product early and start a new project.
Secondly, products in stars phase are in quick increased market share and high profitable. Because the market is still rapid growing, 
companies must continue to invest in order to keep pace with market growth, and repel competitors. It is possible that the products will
not go to the cash cows, because of lacking of money and decision mistikes(extend unaccepted requirement).
Thirdly, products in cash cows generates a lot of cash, but future growth prospects are limited.
Finally, there is no hope in gods phase to improve products' performance. We should release resources as soon as possible into new products.


2.How do you connect your requirements to your architecture?
It depends on what development process I use.
For instance, if I use waterfall model(actually few people use such a model to develope a  product. ), the requirements are frozen and 
the architectures are constrained. Abviously, architectures based on requirements and both of them can't be changed.If I use a 
incremental model or agile, the requirements are increased in a period time, and the development start from requirements to 
architectures  and back to requirements as iteration. Considering the depedencies bewteen  requirements and architetures, we need 
architetures are adaptable and stable.  Referring Twin Peaks model, it presents a good method to connect requiremenets and architetures. 
In the process of breaking down requirements and architectures, the implementation dependence are becaming close.


3.Can you connect all requirements directly? What do you do if you cannot?
I think it is impossible to connect all requirements directly for me. 
1.Classify the requirements.
2.Find the dependencies among the requirements based on the classify.
3.Connect the relative requirements.
